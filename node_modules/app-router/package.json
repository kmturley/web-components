{
  "_args": [
    [
      "kmturley/app-router",
      "/Users/kimturley/Sites/web-components"
    ]
  ],
  "_from": "kmturley/app-router",
  "_id": "app-router@2.6.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/app-router",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/kmturley/app-router/master/package.json",
      "gitUrl": "git://github.com/kmturley/app-router.git",
      "httpsUrl": "git+https://github.com/kmturley/app-router.git",
      "shortcut": "github:kmturley/app-router",
      "ssh": "git@github.com:kmturley/app-router.git",
      "sshUrl": "git+ssh://git@github.com/kmturley/app-router.git",
      "type": "github"
    },
    "name": null,
    "raw": "kmturley/app-router",
    "rawSpec": "kmturley/app-router",
    "scope": null,
    "spec": "github:kmturley/app-router",
    "type": "hosted"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "git://github.com/kmturley/app-router.git#7126a603d8d8e9ec5cc604887f8fb8fcea23bc60",
  "_shasum": "36a84236c48136aeff716b704b15f0d4c0991690",
  "_shrinkwrap": null,
  "_spec": "kmturley/app-router",
  "_where": "/Users/kimturley/Sites/web-components",
  "authors": [
    "Erik Ringsmuth <erik.ringsmuth@gmail.com>"
  ],
  "bugs": {
    "url": "https://github.com/erikringsmuth/app-router/issues"
  },
  "dependencies": {},
  "description": "Router for Web Components.",
  "devDependencies": {
    "gulp": "^3.8.10",
    "gulp-inline": "0.0.5",
    "gulp-jshint": "^1.9.0",
    "gulp-karma": "0.0.4",
    "gulp-rename": "^1.2.0",
    "gulp-uglify": "^0.3.1",
    "jasmine": "^2.1.0",
    "jshint-stylish": "^0.4.0",
    "karma": "~0.12.25",
    "karma-chrome-launcher": "^0.1.4",
    "karma-jasmine": "^0.1.5"
  },
  "gitHead": "7126a603d8d8e9ec5cc604887f8fb8fcea23bc60",
  "homepage": "https://github.com/erikringsmuth/app-router#readme",
  "keywords": [
    "web-components",
    "router",
    "polymer",
    "x-tag"
  ],
  "name": "app-router",
  "optionalDependencies": {},
  "readme": "## Router for Web Components\n> Works with [Polymer](https://www.polymer-project.org/), [X-Tag](http://www.x-tags.org/), and natively.\n>\n> [erikringsmuth.github.io/app-router](https://erikringsmuth.github.io/app-router/)\n\nManage page state. Lazy-load content. Data-bind path variables and query parameters. Use multiple layouts. Navigate with `hashchange` and HTML5 `pushState`. Animate transitions using `core-animated-pages`.\n\n[Download](https://github.com/erikringsmuth/app-router/archive/master.zip) or run `bower install app-router --save`.\n\n## Configuration\n\nDefine how URLs map to pages.\n\n```html\n<!doctype html>\n<html>\n  <head>\n    <title>App Router</title>\n    <link rel=\"import\" href=\"/bower_components/app-router/app-router.html\">\n  </head>\n  <body>\n    <app-router>\n      <!-- matches an exact path -->\n      <app-route path=\"/home\" import=\"/pages/home-page.html\"></app-route>\n\n      <!-- matches using a wildcard -->\n      <app-route path=\"/customer/*\" import=\"/pages/customer-page.html\"></app-route>\n\n      <!-- matches using a path variable -->\n      <app-route path=\"/order/:id\" import=\"/pages/order-page.html\"></app-route>\n\n      <!-- matches a pattern like '/word/number' -->\n      <app-route path=\"/^\\/\\w+\\/\\d+$/i\" regex import=\"/pages/regex-page.html\"></app-route>\n\n      <!-- matches everything else -->\n      <app-route path=\"*\" import=\"/pages/not-found-page.html\"></app-route>\n    </app-router>\n  </body>\n</html>\n```\n\n## Navigation\n\nClick links or call `router.go()`.\n\n```html\n<!-- hashchange -->\n<a href=\"#/home\">Home</a>\n\n<!-- pushState() -->\n<a is=\"pushstate-anchor\" href=\"/home\">Home</a>\n\n<!-- router.go(path, options) -->\n<script>\n  document.querySelector('app-router').go('/home');\n</script>\n```\n\nThe router listens to `popstate` and `hashchange` events. Changing the URL will find the first `app-route` that matches, load the element or template, and replace the current view.\n\n#### hashchange\nClicking `<a href=\"#/home\">Home</a>` will fire a `hashchange` event and tell the router to load the first route that matches `/home`. You don't need to handle the event in your Javascript. Hash paths `#/home` match routes without the hash `<app-route path=\"/home\">`.\n\n#### pushState\nYou can use the [pushstate-anchor](https://github.com/erikringsmuth/pushstate-anchor) or [html5-history-anchor](https://github.com/erikringsmuth/html5-history-anchor) to extend `<a>` tags with the HTML5 history API.\n\n```html\n<a is=\"pushstate-anchor\" href=\"/home\">Home</a>\n```\n\nThis will call `pushState()` and dispatch a `popstate` event.\n\n#### go(path, options)\nYou can call the router from Javascript to navigate imperatively.\n\n```js\ndocument.querySelector('app-router').go('/home');\n// or\ndocument.querySelector('app-router').go('/home', {replace: true});\n```\n\nIf you use `go(path, options)` you should also set the mode to `hash` or `pushstate` on the router.\n\n```html\n<app-router mode=\"auto|pushstate|hash\">\n  <!-- app-routes -->\n</app-router>\n```\n\n## Data Binding\nPath variables and query parameters automatically attach to the element's attributes.\n\n``` html\n<!-- url -->\n<a is=\"pushstate-anchor\" href=\"/order/123?sort=ascending\">Order 123</a>\n\n<!-- route -->\n<app-route path=\"/order/:orderId\" import=\"/pages/order-page.html\"></app-route>\n\n<!-- will bind 123 to the page's `orderId` attribute and \"ascending\" to the `sort` attribute -->\n<order-page orderId=\"123\" sort=\"ascending\"></order-page>\n```\n\nIf you're using Polymer, you can also bind path variables and query parameters to templates.\n```html\n<app-route path=\"/order/:orderId\">\n  <template>\n    <p>Your order number is {{orderId}}</p>\n  </template>\n</app-route>\n```\n\nSee it in action [here](https://erikringsmuth.github.io/app-router/#/databinding/1337?queryParam1=Routing%20with%20Web%20Components!).\n\n## &lt;app-route&gt; options\n\n#### import a custom element\nLazy-load a custom element.\n\n```html\n<app-route path=\"/customer/:customerId\" import=\"/pages/customer-page.html\" [element=\"customer-page\"]></app-route>\n```\n\nYou only need to set the `element` attribute if the element's name is different than the file name.\n\n#### pre-loaded custom element\nInclude the `element=\"element-name\"` attribute on the route to use a pre-loaded custom element. This is how you use bundled (vulcanized) custom elements.\n\n```html\n<head>\n  <link rel=\"import\" href=\"/pages/page-bundle.html\">\n</head>\n<app-router>\n  <app-route path=\"/customer/:customerId\" element=\"customer-page\"></app-route>\n</app-router>\n```\n\n#### import template\nYou can import a `<template>` instead of a custom element. Just include the `template` attribute.\n\n```html\n<app-route path=\"/example\" import=\"/pages/template-page.html\" template></app-route>\n```\n\n#### inline template\nFinally, you can in-line a `<template>` like this.\n\n```html\n<app-route path=\"/example\">\n  <template>\n    <p>Inline template FTW!</p>\n  </template>\n</app-route>\n```\n\n#### regular expressions\nInclude the `regex` attribute to match on a regular expression. The format is the same as a JavaScript regular expression.\n\n```html\n<!-- matches a pattern like '/word/number' -->\n<app-route path=\"/^\\/\\w+\\/\\d+$/i\" regex import=\"/pages/regex-page.html\"></app-route>\n```\n\n#### redirect\nA route can redirect to another path.\n\n```html\n<app-router mode=\"pushstate\">\n  <app-route path=\"/home\" import=\"/pages/home-page.html\"></app-route>\n  <app-route path=\"*\" redirect=\"/home\"></app-route>\n</app-router>\n```\n\nWhen you use `redirect` you should also set `mode=\"hash|pushstate\"` on the `app-router`.\n\n## &lt;app-router&gt; options\n\n#### mode\nOne set of routes will match regular paths `/` and hash paths `#/`. You can force a specific mode with `mode=\"auto|hash|pushstate\"`.\n\n```html\n<app-router mode=\"pushstate\">\n  <!-- always ignore the hash and match on the path -->\n</app-router>\n```\n\nWhen left in `auto`, redirects and `go(path, options)` will use hash paths.\n\n#### trailing slashes\nBy default `/home` and `/home/` are treated as separate routes. You can configure the router to ignore trailing slashes with `trailingSlash=\"ignore\"`.\n```html\n<app-router trailingSlash=\"ignore\">\n  <!-- matches '/home' and '/home/' -->\n  <app-route path=\"/home\" import=\"/pages/home-page.html\"></app-route>\n</app-router>\n```\n\n## Demo Site & Example Setup\nCheck out the `app-router` in action at [erikringsmuth.github.io/app-router](https://erikringsmuth.github.io/app-router/).\n\nYou can download an example setup here https://github.com/erikringsmuth/app-router-examples to get running locally.\n\nExamples showing `app-router` and `flatiron-director` versus no router https://github.com/erikringsmuth/polymer-router-demos.\n\n## Breaking Changes\nCheck the [change log](https://github.com/erikringsmuth/app-router/blob/master/changelog.md) for breaking changes in major versions.\n\n## Build, Test, and Debug [![Build Status](https://travis-ci.org/erikringsmuth/app-router.png?branch=master)](https://travis-ci.org/erikringsmuth/app-router)\nSource files are under the `src` folder. The build process writes to the root directory. The easiest way to debug is to include the source script rather than the minified HTML import.\n```html\n<script src=\"/bower_components/app-router/src/app-router.js\"></script>\n```\n\nTo build:\n- Run `bower install` and `npm install` to install dev dependencies\n- Lint, test, build, and minify code with `gulp`\n- Manually run functional tests in the browser by starting a static content server (node `http-server` or `python -m SimpleHTTPServer`) and open [http://localhost:8080/tests/functional-tests/](http://localhost:8080/tests/functional-tests/)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/erikringsmuth/app-router.git"
  },
  "scripts": {
    "test": "node node_modules/gulp/bin/gulp.js ci"
  },
  "version": "2.6.1"
}
